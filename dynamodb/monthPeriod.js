"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dynamodbUtils = require("./utils");
const constants_1 = require("../utils/constants");
class MonthPeriodRepository {
    constructor() {
        this.dynamoDbClient = dynamodbUtils.createDynamoDbClient(constants_1.constants.AWS_REGION);
    }
    async query(props) {
        try {
            const queryParameters = {
                TableName: `${process.env[constants_1.constants.ENV_VAR_DYNAMODB_TABLE_MONTH_PERIOD]}`,
                KeyConditionExpression: "#month = :month",
                ExpressionAttributeNames: { "#month": "month" },
                ExpressionAttributeValues: { ":month": { "S": props.month } }
            };
            // Query the table
            const data = await this.dynamoDbClient.query(queryParameters).promise();
            // Map and return the result
            let monthPeriodList = this.mapResultList(data.Items);
            let response = monthPeriodList[0];
            return new Promise(resolve => resolve(response));
        }
        catch (exception) {
            // exception: AWS.AWSError
            console.error(exception);
            throw exception;
        }
    }
    async putItem(monthPeriod) {
        try {
            const putItemParameters = {
                TableName: `${process.env[constants_1.constants.ENV_VAR_DYNAMODB_TABLE_MONTH_PERIOD]}`,
                Item: {
                    "month": { "S": monthPeriod.month },
                    "startDate": { "S": monthPeriod.startDate },
                    "endDate": { "S": monthPeriod.endDate }
                }
            };
            // Persist the item
            const data = await this.dynamoDbClient.putItem(putItemParameters).promise();
            return new Promise(resolve => resolve());
        }
        catch (exception) {
            // exception: AWS.AWSError
            console.error(exception);
            throw exception;
        }
    }
    mapResultList(data) {
        let monthPeriodList = [];
        if (data && data.length > 0) {
            for (let i = 0; i < data.length; i++) {
                monthPeriodList.push(this.mapResult(data[i]));
            }
        }
        return monthPeriodList;
    }
    mapResult(item) {
        return {
            month: item === null || item === void 0 ? void 0 : item.month.S,
            startDate: item === null || item === void 0 ? void 0 : item.startDate.S,
            endDate: item === null || item === void 0 ? void 0 : item.endDate.S
        };
    }
}
exports.MonthPeriodRepository = MonthPeriodRepository;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGhQZXJpb2QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtb250aFBlcmlvZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHlDQUF5QztBQUN6QyxrREFBOEM7QUFZOUMsTUFBYSxxQkFBcUI7SUFJOUI7UUFDSSxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQWdCO1FBQ3hCLElBQUk7WUFDQSxNQUFNLGVBQWUsR0FBa0M7Z0JBQ25ELFNBQVMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQVMsQ0FBQyxtQ0FBbUMsQ0FBQyxFQUFFO2dCQUMxRSxzQkFBc0IsRUFBRSxpQkFBaUI7Z0JBQ3pDLHdCQUF3QixFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtnQkFDL0MseUJBQXlCLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFO2FBQ2hFLENBQUM7WUFFRixrQkFBa0I7WUFDbEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUV4RSw0QkFBNEI7WUFDNUIsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckQsSUFBSSxRQUFRLEdBQXdCLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV2RCxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7U0FFcEQ7UUFBQyxPQUFPLFNBQVMsRUFBRTtZQUNoQiwwQkFBMEI7WUFDMUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6QixNQUFNLFNBQVMsQ0FBQztTQUNuQjtJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQStCO1FBQ3pDLElBQUk7WUFFQSxNQUFNLGlCQUFpQixHQUFvQztnQkFDdkQsU0FBUyxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBUyxDQUFDLG1DQUFtQyxDQUFDLEVBQUU7Z0JBQzFFLElBQUksRUFBRTtvQkFDRixPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUcsV0FBVyxDQUFDLEtBQUssRUFBRTtvQkFDcEMsV0FBVyxFQUFFLEVBQUUsR0FBRyxFQUFFLFdBQVcsQ0FBQyxTQUFTLEVBQUU7b0JBQzNDLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsT0FBTyxFQUFFO2lCQUMxQzthQUNKLENBQUM7WUFFRixtQkFBbUI7WUFDbkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzVFLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBRTVDO1FBQUMsT0FBTyxTQUFTLEVBQUU7WUFDaEIsMEJBQTBCO1lBQzFCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDekIsTUFBTSxTQUFTLENBQUM7U0FDbkI7SUFDTCxDQUFDO0lBRU8sYUFBYSxDQUFDLElBQTRCO1FBQzlDLElBQUksZUFBZSxHQUE4QixFQUFFLENBQUM7UUFFcEQsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekIsS0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzlCLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2pEO1NBQ0o7UUFFRCxPQUFPLGVBQWUsQ0FBQztJQUMzQixDQUFDO0lBRU8sU0FBUyxDQUFDLElBQWdDO1FBQzlDLE9BQU87WUFDSCxLQUFLLEVBQUUsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLEtBQUssQ0FBQyxDQUFFO1lBQ3JCLFNBQVMsRUFBRSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsU0FBUyxDQUFDLENBQUU7WUFDN0IsT0FBTyxFQUFFLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxPQUFPLENBQUMsQ0FBRTtTQUM1QixDQUFDO0lBQ04sQ0FBQztDQUVKO0FBNUVELHNEQTRFQztBQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XHJcbmltcG9ydCAqIGFzIGR5bmFtb2RiVXRpbHMgZnJvbSAnLi91dGlscyc7XHJcbmltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cydcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTW9udGhQZXJpb2RNYXBwaW5nIHtcclxuICAgIG1vbnRoOiBzdHJpbmcsXHJcbiAgICBzdGFydERhdGU6IHN0cmluZyxcclxuICAgIGVuZERhdGU6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExpc3RQcm9wcyB7XHJcbiAgICBtb250aD86IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTW9udGhQZXJpb2RSZXBvc2l0b3J5IHtcclxuXHJcbiAgICBwcml2YXRlIGR5bmFtb0RiQ2xpZW50OiBBV1MuRHluYW1vREI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5keW5hbW9EYkNsaWVudCA9IGR5bmFtb2RiVXRpbHMuY3JlYXRlRHluYW1vRGJDbGllbnQoY29uc3RhbnRzLkFXU19SRUdJT04pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHF1ZXJ5KHByb3BzOiBMaXN0UHJvcHMpOiBQcm9taXNlPE1vbnRoUGVyaW9kTWFwcGluZz4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1ldGVyczogQVdTLkR5bmFtb0RCLlR5cGVzLlF1ZXJ5SW5wdXQgPSB7XHJcbiAgICAgICAgICAgICAgICBUYWJsZU5hbWU6IGAke3Byb2Nlc3MuZW52W2NvbnN0YW50cy5FTlZfVkFSX0RZTkFNT0RCX1RBQkxFX01PTlRIX1BFUklPRF19YCxcclxuICAgICAgICAgICAgICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb246IFwiI21vbnRoID0gOm1vbnRoXCIsXHJcbiAgICAgICAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHsgXCIjbW9udGhcIjogXCJtb250aFwiIH0sXHJcbiAgICAgICAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7IFwiOm1vbnRoXCI6IHsgXCJTXCI6IHByb3BzLm1vbnRoIH0gfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gUXVlcnkgdGhlIHRhYmxlXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmR5bmFtb0RiQ2xpZW50LnF1ZXJ5KHF1ZXJ5UGFyYW1ldGVycykucHJvbWlzZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gTWFwIGFuZCByZXR1cm4gdGhlIHJlc3VsdFxyXG4gICAgICAgICAgICBsZXQgbW9udGhQZXJpb2RMaXN0ID0gdGhpcy5tYXBSZXN1bHRMaXN0KGRhdGEuSXRlbXMpO1xyXG4gICAgICAgICAgICBsZXQgcmVzcG9uc2U6IE1vbnRoUGVyaW9kTWFwcGluZyAgPSBtb250aFBlcmlvZExpc3RbMF07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiByZXNvbHZlKHJlc3BvbnNlKSk7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xyXG4gICAgICAgICAgICAvLyBleGNlcHRpb246IEFXUy5BV1NFcnJvclxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGV4Y2VwdGlvbik7XHJcbiAgICAgICAgICAgIHRocm93IGV4Y2VwdGlvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHV0SXRlbShtb250aFBlcmlvZDogTW9udGhQZXJpb2RNYXBwaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHB1dEl0ZW1QYXJhbWV0ZXJzOiBBV1MuRHluYW1vREIuVHlwZXMuUHV0SXRlbUlucHV0ID0ge1xyXG4gICAgICAgICAgICAgICAgVGFibGVOYW1lOiBgJHtwcm9jZXNzLmVudltjb25zdGFudHMuRU5WX1ZBUl9EWU5BTU9EQl9UQUJMRV9NT05USF9QRVJJT0RdfWAsXHJcbiAgICAgICAgICAgICAgICBJdGVtOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJtb250aFwiOiB7IFwiU1wiIDogbW9udGhQZXJpb2QubW9udGggfSxcclxuICAgICAgICAgICAgICAgICAgICBcInN0YXJ0RGF0ZVwiOiB7IFwiU1wiOiBtb250aFBlcmlvZC5zdGFydERhdGUgfSxcclxuICAgICAgICAgICAgICAgICAgICBcImVuZERhdGVcIjogeyBcIlNcIjogbW9udGhQZXJpb2QuZW5kRGF0ZSB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBQZXJzaXN0IHRoZSBpdGVtXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmR5bmFtb0RiQ2xpZW50LnB1dEl0ZW0ocHV0SXRlbVBhcmFtZXRlcnMpLnByb21pc2UoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVzb2x2ZSgpKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XHJcbiAgICAgICAgICAgIC8vIGV4Y2VwdGlvbjogQVdTLkFXU0Vycm9yXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXhjZXB0aW9uKTtcclxuICAgICAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1hcFJlc3VsdExpc3QoZGF0YT86IEFXUy5EeW5hbW9EQi5JdGVtTGlzdCk6IEFycmF5PE1vbnRoUGVyaW9kTWFwcGluZz4ge1xyXG4gICAgICAgIGxldCBtb250aFBlcmlvZExpc3Q6IEFycmF5PE1vbnRoUGVyaW9kTWFwcGluZz4gPSBbXTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG1vbnRoUGVyaW9kTGlzdC5wdXNoKHRoaXMubWFwUmVzdWx0KGRhdGFbaV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1vbnRoUGVyaW9kTGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1hcFJlc3VsdChpdGVtPzogQVdTLkR5bmFtb0RCLkF0dHJpYnV0ZU1hcCkgOiBNb250aFBlcmlvZE1hcHBpbmcge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1vbnRoOiBpdGVtPy5tb250aC5TISxcclxuICAgICAgICAgICAgc3RhcnREYXRlOiBpdGVtPy5zdGFydERhdGUuUyEsXHJcbiAgICAgICAgICAgIGVuZERhdGU6IGl0ZW0/LmVuZERhdGUuUyFcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufTsiXX0=