"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dynamodbUtils = require("./utils");
const constants_1 = require("../utils/constants");
class CategoryMappingRepository {
    constructor() {
        this.dynamoDbClient = dynamodbUtils.createDynamoDbClient(constants_1.constants.AWS_REGION);
    }
    async query(props) {
        var _a;
        try {
            const queryParameters = {
                TableName: `${process.env[constants_1.constants.ENV_VAR_DYNAMODB_TABLE_CATEGORY_MAPPING]}`,
                KeyConditionExpression: "#description = :description",
                ExpressionAttributeNames: { "#description": "description" },
                ExpressionAttributeValues: { ":description": { "S": props.description } }
            };
            // Query the table
            const data = await this.dynamoDbClient.query(queryParameters).promise();
            // Map and return the result
            let categoryMappingList = this.mapResultList(data.Items);
            let response = {
                categoryMappingList: categoryMappingList,
                count: data.Count || 0,
                lastEvaluatedKey: ((_a = data.LastEvaluatedKey) === null || _a === void 0 ? void 0 : _a.id.S) || ''
            };
            return new Promise(resolve => resolve(response));
        }
        catch (exception) {
            // exception: AWS.AWSError
            console.error(exception);
            throw exception;
        }
    }
    async putItem(categoryMapping) {
        try {
            const putItemParameters = {
                TableName: `${process.env[constants_1.constants.ENV_VAR_DYNAMODB_TABLE_CATEGORY_MAPPING]}`,
                Item: {
                    "description": { "S": categoryMapping.description },
                    "category": { "S": categoryMapping.category },
                    "regex": { "BOOL": categoryMapping.regex }
                }
            };
            // Persist the item
            const data = await this.dynamoDbClient.putItem(putItemParameters).promise();
            // Map and return the result
            let categoryMappingPersisted = this.mapResult(data.Attributes);
            return new Promise(resolve => resolve(categoryMappingPersisted));
        }
        catch (exception) {
            // exception: AWS.AWSError
            console.error(exception);
            throw exception;
        }
    }
    mapResultList(data) {
        let categoryMappingList = [];
        if (data && data.length > 0) {
            for (let i = 0; i < data.length; i++) {
                categoryMappingList.push(this.mapResult(data[i]));
            }
            // Sort the result by date
            categoryMappingList.sort((a, b) => a.date - b.date);
        }
        return categoryMappingList;
    }
    mapResult(item) {
        return {
            description: item === null || item === void 0 ? void 0 : item.description.S,
            category: item === null || item === void 0 ? void 0 : item.category.S,
            regex: item === null || item === void 0 ? void 0 : item.regex.BOOL
        };
    }
}
exports.CategoryMappingRepository = CategoryMappingRepository;
;
//# sourceMappingURL=data:application/json;base64,