"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dynamodbUtils = require("./utils");
const constants_1 = require("../utils/constants");
class TransactionRepository {
    constructor() {
        this.dynamoDbClient = dynamodbUtils.createDynamoDbClient(constants_1.constants.AWS_REGION);
    }
    async list(props) {
        var _a;
        try {
            // If it is a search without parameter it is paginates
            const scanParameters = {
                TableName: `${process.env[constants_1.constants.ENV_VAR_DYNAMODB_TABLE_TRANSACTIONS]}`,
                Limit: 10
            };
            // Update the query with the filter properties
            if (props.startDate || props.endDate) {
                let filterExpression = "";
                let expressionAttributeValues = {};
                let expressionAttributeNames = {};
                if (props.startDate) {
                    filterExpression = "#startDate >= :startDate";
                    expressionAttributeNames["#startDate"] = "date";
                    expressionAttributeValues[":startDate"] = { "S": props.startDate };
                }
                if (props.endDate) {
                    if (filterExpression != "") {
                        filterExpression += " and ";
                    }
                    filterExpression += "#endDate <= :endDate";
                    expressionAttributeNames["#endDate"] = "date";
                    expressionAttributeValues[":endDate"] = { "S": props.endDate };
                }
                scanParameters.FilterExpression = filterExpression;
                scanParameters.ExpressionAttributeNames = expressionAttributeNames;
                scanParameters.ExpressionAttributeValues = expressionAttributeValues;
                delete scanParameters.Limit; // Return everything!
            }
            // Scan the table
            const data = await this.dynamoDbClient.scan(scanParameters).promise();
            // Map and return the result
            let transactionList = this.mapTransactionResult(data.Items);
            let response = {
                transactionList: transactionList,
                count: data.Count || 0,
                lastEvaluatedKey: ((_a = data.LastEvaluatedKey) === null || _a === void 0 ? void 0 : _a.id.S) || ''
            };
            return new Promise(resolve => resolve(response));
        }
        catch (exception) {
            // exception: AWS.AWSError
            return new Promise(rejects => rejects(exception));
        }
    }
    async query(props) {
        var _a;
        try {
            const queryParameters = {
                TableName: `${process.env[constants_1.constants.ENV_VAR_DYNAMODB_TABLE_TRANSACTIONS]}`,
                KeyConditionExpression: "#id = :id",
                ExpressionAttributeNames: { "#id": "id" },
                ExpressionAttributeValues: { ":id": { "S": props.id } }
            };
            // Query the table
            const data = await this.dynamoDbClient.query(queryParameters).promise();
            // Map and return the result
            let transactionList = this.mapTransactionResult(data.Items);
            let response = {
                transactionList: transactionList,
                count: data.Count || 0,
                lastEvaluatedKey: ((_a = data.LastEvaluatedKey) === null || _a === void 0 ? void 0 : _a.id.S) || ''
            };
            return new Promise(resolve => resolve(response));
        }
        catch (exception) {
            // exception: AWS.AWSError
            console.error(exception);
            throw exception;
        }
    }
    async updateCategory(transaction) {
        try {
            const updateItemParameters = {
                TableName: `${process.env[constants_1.constants.ENV_VAR_DYNAMODB_TABLE_TRANSACTIONS]}`,
                Key: {
                    "id": { "S": transaction.id }
                },
                UpdateExpression: "SET #category = :category",
                ExpressionAttributeNames: { "#category": "category" },
                ExpressionAttributeValues: { ":category": { "S": transaction.category } }
            };
            // Persist the item
            const data = await this.dynamoDbClient.updateItem(updateItemParameters).promise();
            // Map and return the result
            let categoryMappingPersisted = this.mapTransaction(data.Attributes);
            return new Promise(resolve => resolve(categoryMappingPersisted));
        }
        catch (exception) {
            // exception: AWS.AWSError
            console.error(exception);
            throw exception;
        }
    }
    mapTransactionResult(data) {
        let transactionList = [];
        if (data && data.length > 0) {
            for (let i = 0; i < data.length; i++) {
                transactionList.push(this.mapTransaction(data[i]));
            }
            // Sort the result by date
            transactionList.sort((a, b) => a.date - b.date);
        }
        return transactionList;
    }
    mapTransaction(item) {
        return {
            id: item === null || item === void 0 ? void 0 : item.id.S,
            value: Number.parseFloat((item === null || item === void 0 ? void 0 : item.value.N) || "-1"),
            type: item === null || item === void 0 ? void 0 : item.type.S,
            date: Date.parse((item === null || item === void 0 ? void 0 : item.date.S) || ""),
            description: item === null || item === void 0 ? void 0 : item.description.S,
            category: item === null || item === void 0 ? void 0 : item.category.S,
            reversed: item === null || item === void 0 ? void 0 : item.reversed.BOOL,
            smsId: item === null || item === void 0 ? void 0 : item.smsId.S
        };
    }
}
exports.TransactionRepository = TransactionRepository;
;
//# sourceMappingURL=data:application/json;base64,